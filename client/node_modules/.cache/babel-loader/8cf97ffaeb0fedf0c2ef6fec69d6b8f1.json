{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  ADD_NEW_LIST: \"ADD_NEW_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n  MARK_LIST_DELETE: \"MARK_LIST_DELETE\",\n  DELETE_LIST: \"DELETE_LIST\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    isItemEditActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // ADD NEW LIST\n\n      case GlobalStoreActionType.ADD_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.currentList,\n            newListCounter: payload.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: false\n          });\n        }\n      // MARK LIST TO DELETE\n\n      case GlobalStoreActionType.MARK_LIST_DELETE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // DELETE LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: true\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: payload,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n    store.loadIdNamePairs;\n  }; //Add New List\n\n\n  store.addList = function () {\n    async function asyncAddList() {\n      let nextKey = JSON.parse(localStorage.getItem(\"list-key\"));\n\n      if (nextKey == null) {\n        localStorage.setItem(\"list-key\", JSON.stringify({\n          \"nextKey\": 2\n        }));\n        nextKey = 1;\n      } else {\n        let nextKey = JSON.parse(localStorage.getItem(\"list-key\")).nextKey;\n        let newKey = nextKey + 1;\n        localStorage.setItem(\"list-key\", JSON.stringify({\n          \"nextKey\": newKey\n        }));\n      }\n\n      let newList = {\n        name: \"Untitled\" + nextKey.nextKey,\n        items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\n      };\n      let response = await api.createTop5List(newList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.ADD_NEW_LIST,\n          payload: {\n            currentList: response.data.top5List._id,\n            newListCounter: response.data.top5List.newKey\n          }\n        });\n        store.setCurrentList(response.data.top5List._id);\n      }\n    }\n\n    asyncAddList();\n  };\n\n  store.showDeleteModal = function () {\n    document.getElementById(\"delete-modal\").classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteModal = function () {\n    document.getElementById(\"delete-modal\").classList.remove(\"is-visible\");\n  }; // mark list to delete\n\n\n  store.markListForDelete = function (list) {\n    store.showDeleteModal();\n\n    async function asyncMarkListForDelete(list) {\n      let response = await api.getTop5ListById(list);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_DELETE,\n          payload: top5List\n        });\n      }\n    }\n\n    asyncMarkListForDelete(list);\n  }; // DELETE LIST\n\n\n  store.deleteMarkedList = function () {\n    store.hideDeleteModal();\n\n    async function asyncDeleteList() {\n      let response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n\n      if (response.data.success) {\n        await api.getTop5ListPairs().then(response => {\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.DELETE_LIST,\n              payload: {\n                idNamePairs: response.data.idNamePairs\n              }\n            });\n          }\n\n          store.loadIdNamePairs();\n        });\n      }\n    }\n\n    asyncDeleteList();\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.setIsItemEditActive = function (editActive) {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n      payload: editActive\n    });\n  };\n\n  store.renameItem = function (index, newText) {\n    store.currentList.items[index] = newText;\n    store.updateCurrentList();\n  };\n\n  store.addChangeItemTransaction = function (id, oldText, newText) {\n    let transaction = new ChangeItem_Transaction(this, id, oldText, newText);\n    tps.addTransaction(transaction);\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"7hMrMEDJ41nPGebkVoNk0cLwA+A=\");","map":{"version":3,"sources":["C:/Users/Haris Kamran/Documents/GitHub/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","ADD_NEW_LIST","SET_LIST_NAME_EDIT_ACTIVE","SET_ITEM_EDIT_ACTIVE","MARK_LIST_DELETE","DELETE_LIST","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","isItemEditActive","listMarkedForDeletion","storeReducer","action","type","payload","isListNameEditActive","changeListName","id","newName","asyncChangeListName","response","getTop5ListById","data","success","top5List","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","loadIdNamePairs","addList","asyncAddList","nextKey","JSON","parse","localStorage","getItem","setItem","stringify","newKey","newList","items","createTop5List","setCurrentList","showDeleteModal","document","getElementById","classList","add","hideDeleteModal","remove","markListForDelete","list","asyncMarkListForDelete","deleteMarkedList","asyncDeleteList","deleteTop5ListById","then","closeCurrentList","asyncLoadIdNamePairs","console","log","asyncSetCurrentList","history","push","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","i","updateCurrentList","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","setIsItemEditActive","editActive","renameItem","index","newText","addChangeItemTransaction","oldText"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    ADD_NEW_LIST: \"ADD_NEW_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\r\n    MARK_LIST_DELETE: \"MARK_LIST_DELETE\",\r\n    DELETE_LIST: \"DELETE_LIST\"\r\n    \r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        isItemEditActive: false,\r\n        listMarkedForDeletion: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // ADD NEW LIST\r\n            case GlobalStoreActionType.ADD_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload.currentList,\r\n                    newListCounter: payload.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: false\r\n                });\r\n            }\r\n            // MARK LIST TO DELETE\r\n            case GlobalStoreActionType.MARK_LIST_DELETE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs, \r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false, \r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: payload\r\n                });\r\n            }\r\n            // DELETE LIST\r\n            case GlobalStoreActionType.DELETE_LIST: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: true\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: payload,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                top5List.name = newName;\r\n                async function updateList(top5List) {\r\n                    response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(top5List) {\r\n                            response = await api.getTop5ListPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        top5List: top5List\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(top5List);\r\n                    }\r\n                }\r\n                updateList(top5List);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n        store.loadIdNamePairs\r\n    }\r\n\r\n    //Add New List\r\n    store.addList = function () {\r\n        async function asyncAddList() {\r\n            let nextKey = JSON.parse(localStorage.getItem(\"list-key\"))\r\n            if (nextKey == null) {\r\n                localStorage.setItem(\"list-key\", JSON.stringify({\"nextKey\" : 2}\r\n                ));\r\n                nextKey = 1;\r\n            }\r\n            else {\r\n            let nextKey = JSON.parse(localStorage.getItem(\"list-key\")).nextKey;\r\n            let newKey = nextKey + 1;\r\n            localStorage.setItem(\"list-key\", JSON.stringify(\r\n                {\r\n                    \"nextKey\": newKey\r\n                }\r\n            ));\r\n            }\r\n            let newList = {\r\n                name: \"Untitled\" + nextKey.nextKey,\r\n                items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\r\n            };\r\n            \r\n            let response = await api.createTop5List(newList);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.ADD_NEW_LIST, \r\n                    payload: {\r\n                        currentList : response.data.top5List._id,\r\n                        newListCounter : response.data.top5List.newKey,\r\n                    }\r\n                })\r\n                store.setCurrentList(response.data.top5List._id);\r\n            }\r\n        }\r\n        asyncAddList();\r\n    }\r\n    store.showDeleteModal = function() {\r\n        document.getElementById(\"delete-modal\").classList.add(\"is-visible\");\r\n    }\r\n\r\n    store.hideDeleteModal = function() {\r\n        document.getElementById(\"delete-modal\").classList.remove(\"is-visible\");\r\n    }\r\n\r\n    // mark list to delete\r\n    store.markListForDelete = function(list) {\r\n        store.showDeleteModal();  \r\n        async function asyncMarkListForDelete(list) {\r\n            let response = await api.getTop5ListById(list);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.MARK_LIST_DELETE,\r\n                    payload: top5List\r\n                });\r\n            }\r\n        }\r\n        asyncMarkListForDelete(list); \r\n    }\r\n\r\n    // DELETE LIST\r\n    store.deleteMarkedList = function() {\r\n        store.hideDeleteModal();\r\n        async function asyncDeleteList(){\r\n            let response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\r\n            if (response.data.success) {\r\n                await api.getTop5ListPairs().then((response) => {\r\n                    if (response.data.success) {\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.DELETE_LIST, \r\n                            payload: {\r\n                                idNamePairs: response.data.idNamePairs,\r\n                            }\r\n                        });\r\n                    }\r\n                    store.loadIdNamePairs();\r\n                });\r\n            }\r\n        }\r\n        asyncDeleteList();\r\n    }\r\n\r\n\r\n    \r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getTop5ListPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n\r\n                response = await api.updateTop5ListById(top5List._id, top5List);\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: top5List\r\n                    });\r\n                    store.history.push(\"/top5list/\" + top5List._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n    store.updateCurrentList = function() {\r\n        async function asyncUpdateCurrentList() {\r\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: store.currentList\r\n                });\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    store.setIsItemEditActive = function (editActive) {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\r\n            payload: editActive\r\n        });\r\n    }\r\n\r\n    store.renameItem = function (index, newText) {\r\n        store.currentList.items[index] = newText;\r\n        store.updateCurrentList();\r\n    }\r\n    \r\n    store.addChangeItemTransaction = function (id, oldText, newText) {\r\n        let transaction = new ChangeItem_Transaction(this, id, oldText, newText);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"]},"metadata":{},"sourceType":"module"}